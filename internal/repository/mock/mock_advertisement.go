// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AlexSamarskii/marketplace_vk_intern/internal/repository (interfaces: AdvertisementRepository)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/repository/mock/mock_advertisement.go github.com/AlexSamarskii/marketplace_vk_intern/internal/repository AdvertisementRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/AlexSamarskii/marketplace_vk_intern/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockAdvertisementRepository is a mock of AdvertisementRepository interface.
type MockAdvertisementRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdvertisementRepositoryMockRecorder
	isgomock struct{}
}

// MockAdvertisementRepositoryMockRecorder is the mock recorder for MockAdvertisementRepository.
type MockAdvertisementRepositoryMockRecorder struct {
	mock *MockAdvertisementRepository
}

// NewMockAdvertisementRepository creates a new mock instance.
func NewMockAdvertisementRepository(ctrl *gomock.Controller) *MockAdvertisementRepository {
	mock := &MockAdvertisementRepository{ctrl: ctrl}
	mock.recorder = &MockAdvertisementRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvertisementRepository) EXPECT() *MockAdvertisementRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAdvertisementRepository) Create(ctx context.Context, ad *entity.Advertisement) (*entity.Advertisement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ad)
	ret0, _ := ret[0].(*entity.Advertisement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAdvertisementRepositoryMockRecorder) Create(ctx, ad any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAdvertisementRepository)(nil).Create), ctx, ad)
}

// GetAll mocks base method.
func (m *MockAdvertisementRepository) GetAll(ctx context.Context, userID, page, limit int, sortBy, order string, minPrice, maxPrice *float64) ([]entity.Advertisement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID, page, limit, sortBy, order, minPrice, maxPrice)
	ret0, _ := ret[0].([]entity.Advertisement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAdvertisementRepositoryMockRecorder) GetAll(ctx, userID, page, limit, sortBy, order, minPrice, maxPrice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAdvertisementRepository)(nil).GetAll), ctx, userID, page, limit, sortBy, order, minPrice, maxPrice)
}

// GetByID mocks base method.
func (m *MockAdvertisementRepository) GetByID(ctx context.Context, id int) (*entity.Advertisement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Advertisement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAdvertisementRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAdvertisementRepository)(nil).GetByID), ctx, id)
}

// GetByUserID mocks base method.
func (m *MockAdvertisementRepository) GetByUserID(ctx context.Context, userID int) ([]entity.Advertisement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]entity.Advertisement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockAdvertisementRepositoryMockRecorder) GetByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockAdvertisementRepository)(nil).GetByUserID), ctx, userID)
}
