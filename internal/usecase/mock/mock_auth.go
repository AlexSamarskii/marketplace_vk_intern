// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AlexSamarskii/marketplace_vk_intern/internal/usecase (interfaces: AuthUsecase)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/usecase/mock/mock_auth.go github.com/AlexSamarskii/marketplace_vk_intern/internal/usecase AuthUsecase
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/AlexSamarskii/marketplace_vk_intern/internal/entity/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
	isgomock struct{}
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockAuthUsecase) CreateSession(arg0 context.Context, arg1 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockAuthUsecaseMockRecorder) CreateSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthUsecase)(nil).CreateSession), arg0, arg1)
}

// EmailExists mocks base method.
func (m *MockAuthUsecase) EmailExists(arg0 context.Context, arg1 string) (*dto.LoginExistsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailExists", arg0, arg1)
	ret0, _ := ret[0].(*dto.LoginExistsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailExists indicates an expected call of EmailExists.
func (mr *MockAuthUsecaseMockRecorder) EmailExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailExists", reflect.TypeOf((*MockAuthUsecase)(nil).EmailExists), arg0, arg1)
}

// GetUserIDBySession mocks base method.
func (m *MockAuthUsecase) GetUserIDBySession(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDBySession", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDBySession indicates an expected call of GetUserIDBySession.
func (mr *MockAuthUsecaseMockRecorder) GetUserIDBySession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDBySession", reflect.TypeOf((*MockAuthUsecase)(nil).GetUserIDBySession), arg0, arg1)
}

// Logout mocks base method.
func (m *MockAuthUsecase) Logout(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthUsecaseMockRecorder) Logout(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthUsecase)(nil).Logout), arg0, arg1)
}

// LogoutAll mocks base method.
func (m *MockAuthUsecase) LogoutAll(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutAll indicates an expected call of LogoutAll.
func (mr *MockAuthUsecaseMockRecorder) LogoutAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutAll", reflect.TypeOf((*MockAuthUsecase)(nil).LogoutAll), arg0, arg1)
}
