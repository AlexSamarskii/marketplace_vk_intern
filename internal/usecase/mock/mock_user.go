// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AlexSamarskii/marketplace_vk_intern/internal/usecase (interfaces: UserUsecase)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/usecase/mock/mock_user.go github.com/AlexSamarskii/marketplace_vk_intern/internal/usecase UserUsecase
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/AlexSamarskii/marketplace_vk_intern/internal/entity/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
	isgomock struct{}
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockUserUsecase) GetUser(ctx context.Context, employerID int) (*dto.UserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, employerID)
	ret0, _ := ret[0].(*dto.UserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserUsecaseMockRecorder) GetUser(ctx, employerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserUsecase)(nil).GetUser), ctx, employerID)
}

// Login mocks base method.
func (m *MockUserUsecase) Login(ctx context.Context, loginDTO *dto.Login) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, loginDTO)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserUsecaseMockRecorder) Login(ctx, loginDTO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUsecase)(nil).Login), ctx, loginDTO)
}

// LoginExists mocks base method.
func (m *MockUserUsecase) LoginExists(ctx context.Context, email string) (*dto.LoginExistsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginExists", ctx, email)
	ret0, _ := ret[0].(*dto.LoginExistsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginExists indicates an expected call of LoginExists.
func (mr *MockUserUsecaseMockRecorder) LoginExists(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginExists", reflect.TypeOf((*MockUserUsecase)(nil).LoginExists), ctx, email)
}

// Register mocks base method.
func (m *MockUserUsecase) Register(ctx context.Context, registerDTO *dto.UserRegister) (*dto.UserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, registerDTO)
	ret0, _ := ret[0].(*dto.UserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserUsecaseMockRecorder) Register(ctx, registerDTO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserUsecase)(nil).Register), ctx, registerDTO)
}
