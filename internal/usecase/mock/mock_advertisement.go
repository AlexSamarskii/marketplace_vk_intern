// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AlexSamarskii/marketplace_vk_intern/internal/usecase (interfaces: AdvertisementUsecase)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/usecase/mock/mock_advertisement.go github.com/AlexSamarskii/marketplace_vk_intern/internal/usecase AdvertisementUsecase
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/AlexSamarskii/marketplace_vk_intern/internal/entity/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockAdvertisementUsecase is a mock of AdvertisementUsecase interface.
type MockAdvertisementUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAdvertisementUsecaseMockRecorder
	isgomock struct{}
}

// MockAdvertisementUsecaseMockRecorder is the mock recorder for MockAdvertisementUsecase.
type MockAdvertisementUsecaseMockRecorder struct {
	mock *MockAdvertisementUsecase
}

// NewMockAdvertisementUsecase creates a new mock instance.
func NewMockAdvertisementUsecase(ctrl *gomock.Controller) *MockAdvertisementUsecase {
	mock := &MockAdvertisementUsecase{ctrl: ctrl}
	mock.recorder = &MockAdvertisementUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvertisementUsecase) EXPECT() *MockAdvertisementUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAdvertisementUsecase) Create(ctx context.Context, userID int, req *dto.CreateAdvertisementRequest) (*dto.AdvertisementShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, req)
	ret0, _ := ret[0].(*dto.AdvertisementShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAdvertisementUsecaseMockRecorder) Create(ctx, userID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAdvertisementUsecase)(nil).Create), ctx, userID, req)
}

// GetAll mocks base method.
func (m *MockAdvertisementUsecase) GetAll(ctx context.Context, userID, page, limit int, sortBy, order string, minPrice, maxPrice *float64) ([]dto.AdvertisementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID, page, limit, sortBy, order, minPrice, maxPrice)
	ret0, _ := ret[0].([]dto.AdvertisementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAdvertisementUsecaseMockRecorder) GetAll(ctx, userID, page, limit, sortBy, order, minPrice, maxPrice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAdvertisementUsecase)(nil).GetAll), ctx, userID, page, limit, sortBy, order, minPrice, maxPrice)
}

// GetByID mocks base method.
func (m *MockAdvertisementUsecase) GetByID(ctx context.Context, id int) (*dto.AdvertisementShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*dto.AdvertisementShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAdvertisementUsecaseMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAdvertisementUsecase)(nil).GetByID), ctx, id)
}

// GetByUserID mocks base method.
func (m *MockAdvertisementUsecase) GetByUserID(ctx context.Context, userID int) ([]dto.AdvertisementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]dto.AdvertisementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockAdvertisementUsecaseMockRecorder) GetByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockAdvertisementUsecase)(nil).GetByUserID), ctx, userID)
}
